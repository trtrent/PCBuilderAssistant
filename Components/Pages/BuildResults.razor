@page "/results"
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject NavigationManager Navigation

<PageTitle>Your PC Build - Results</PageTitle>

@if (buildResponse == null)
{
    <div class="container mt-5">
        <div class="row justify-content-center">
            <div class="col-md-6 text-center">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-3">Loading your build results...</p>
            </div>
        </div>
    </div>
}
else
{
    <div class="container">
        <div class="row">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h1 class="display-5 text-primary">
                        <i class="fas fa-desktop me-2"></i>
                        @buildResponse.BuildName
                    </h1>
                    <div class="btn-group">
                        <button class="btn btn-outline-primary" @onclick="DownloadPdf" disabled="@isDownloading">
                            <i class="fas fa-file-pdf me-2"></i>
                            @(isDownloading ? "Generating..." : "Download PDF")
                        </button>
                        <button class="btn btn-outline-secondary" @onclick="DownloadText" disabled="@isDownloading">
                            <i class="fas fa-file-alt me-2"></i>
                            Download Text
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-lg-8">
                @* Build Summary *@
                <div class="card mb-4">
                    <div class="card-header bg-primary text-white">
                        <h3 class="mb-0">Build Summary</h3>
                    </div>
                    <div class="card-body">
                        <p class="lead">@buildResponse.BuildSummary</p>
                        <div class="row">
                            <div class="col-md-6">
                                <h5 class="text-success">Total Cost: @buildResponse.TotalEstimatedCost.ToString("C") @buildResponse.Currency</h5>
                            </div>
                            <div class="col-md-6 text-end">
                                <small class="text-muted">Generated: @buildResponse.GeneratedAt.ToString("MMM dd, yyyy")</small>
                            </div>
                        </div>
                    </div>
                </div>

                @* Components List *@
                <div class="card mb-4">
                    <div class="card-header">
                        <h3 class="mb-0">Components</h3>
                    </div>
                    <div class="card-body p-0">
                        <div class="table-responsive">
                            <table class="table table-hover mb-0">
                                <thead class="table-light">
                                    <tr>
                                        <th>Component</th>
                                        <th>Product</th>
                                        <th>Price</th>
                                        <th>Why Recommended</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var component in buildResponse.Components)
                                    {
                                        <tr>
                                            <td>
                                                <strong>@component.Category</strong>
                                            </td>
                                            <td>
                                                <div>
                                                    <strong>@component.Name</strong>
                                                    <br>
                                                    <small class="text-muted">@component.Brand @component.Model</small>
                                                </div>
                                            </td>
                                            <td>
                                                <span class="badge bg-success">
                                                    @component.EstimatedPrice.ToString("C") @component.Currency
                                                </span>
                                            </td>
                                            <td>
                                                <small>@component.WhyRecommended</small>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>

                @* Performance Expectation *@
                @if (!string.IsNullOrEmpty(buildResponse.PerformanceExpectation))
                {
                    <div class="card mb-4">
                        <div class="card-header">
                            <h3 class="mb-0">Performance Expectation</h3>
                        </div>
                        <div class="card-body">
                            <p>@buildResponse.PerformanceExpectation</p>
                        </div>
                    </div>
                }
            </div>

            <div class="col-lg-4">
                @* Compatibility Warnings *@
                @if (buildResponse.CompatibilityWarnings.Any())
                {
                    <div class="card mb-4">
                        <div class="card-header bg-warning text-dark">
                            <h4 class="mb-0">
                                <i class="fas fa-exclamation-triangle me-2"></i>
                                Compatibility Notes
                            </h4>
                        </div>
                        <div class="card-body">
                            <ul class="list-unstyled mb-0">
                                @foreach (var warning in buildResponse.CompatibilityWarnings)
                                {
                                    <li class="mb-2">
                                        <i class="fas fa-info-circle text-warning me-2"></i>
                                        @warning
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                }

                @* Required Tools *@
                @if (buildResponse.RequiredTools.Any())
                {
                    <div class="card mb-4">
                        <div class="card-header bg-info text-white">
                            <h4 class="mb-0">
                                <i class="fas fa-tools me-2"></i>
                                Required Tools
                            </h4>
                        </div>
                        <div class="card-body">
                            <ul class="list-unstyled mb-0">
                                @foreach (var tool in buildResponse.RequiredTools)
                                {
                                    <li class="mb-1">
                                        <i class="fas fa-check text-success me-2"></i>
                                        @tool
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                }

                @* Assembly Tips *@
                @if (buildResponse.AssemblyTips.Any())
                {
                    <div class="card mb-4">
                        <div class="card-header bg-success text-white">
                            <h4 class="mb-0">
                                <i class="fas fa-lightbulb me-2"></i>
                                Assembly Tips
                            </h4>
                        </div>
                        <div class="card-body">
                            <ul class="list-unstyled mb-0">
                                @foreach (var tip in buildResponse.AssemblyTips)
                                {
                                    <li class="mb-2">
                                        <i class="fas fa-arrow-right text-success me-2"></i>
                                        @tip
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                }

                @* Local Retailers *@
                @if (buildResponse.LocalRetailers.Any())
                {
                    <div class="card mb-4">
                        <div class="card-header">
                            <h4 class="mb-0">
                                <i class="fas fa-store me-2"></i>
                                Recommended Retailers
                            </h4>
                        </div>
                        <div class="card-body">
                            <ul class="list-unstyled mb-0">
                                @foreach (var retailer in buildResponse.LocalRetailers)
                                {
                                    <li class="mb-1">
                                        <i class="fas fa-shopping-cart text-primary me-2"></i>
                                        @retailer
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                }

                @* Future Upgrades *@
                @if (buildResponse.RecommendedUpgrades.Any())
                {
                    <div class="card mb-4">
                        <div class="card-header">
                            <h4 class="mb-0">
                                <i class="fas fa-arrow-up me-2"></i>
                                Future Upgrades
                            </h4>
                        </div>
                        <div class="card-body">
                            <ul class="list-unstyled mb-0">
                                @foreach (var upgrade in buildResponse.RecommendedUpgrades)
                                {
                                    <li class="mb-2">
                                        <i class="fas fa-plus text-info me-2"></i>
                                        @upgrade
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                }
            </div>
        </div>

        <div class="row mt-4">
            <div class="col-12 text-center">
                <a href="/questionnaire" class="btn btn-primary btn-lg me-3">
                    <i class="fas fa-redo me-2"></i>
                    Build Another PC
                </a>
                <a href="/" class="btn btn-outline-secondary btn-lg">
                    <i class="fas fa-home me-2"></i>
                    Go Home
                </a>
            </div>
        </div>
    </div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="toast-container position-fixed bottom-0 end-0 p-3">
        <div class="toast show" role="alert">
            <div class="toast-header bg-danger text-white">
                <strong class="me-auto">Error</strong>
                <button type="button" class="btn-close btn-close-white" @onclick="ClearError"></button>
            </div>
            <div class="toast-body">
                @errorMessage
            </div>
        </div>
    </div>
}

@code {
    private PCBuildResponse? buildResponse;
    private bool isDownloading = false;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Try to get the build response from session storage
            var buildJson = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "currentBuild");
            
            if (!string.IsNullOrEmpty(buildJson))
            {
                buildResponse = System.Text.Json.JsonSerializer.Deserialize<PCBuildResponse>(buildJson);
            }
            else
            {
                // If no build found, redirect to questionnaire
                Navigation.NavigateTo("/questionnaire");
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to load build results. Please try generating a new build.";
            await Task.Delay(3000);
            Navigation.NavigateTo("/questionnaire");
        }
    }

    private async Task DownloadPdf()
    {
        if (buildResponse == null) return;

        isDownloading = true;
        try
        {
            var response = await Http.PostAsJsonAsync("api/pcbuild/download/pdf", buildResponse);
            
            if (response.IsSuccessStatusCode)
            {
                var fileContent = await response.Content.ReadAsByteArrayAsync();
                var fileName = $"PC_Build_{buildResponse.BuildName}_{DateTime.UtcNow:yyyyMMdd}.pdf";
                
                await JSRuntime.InvokeVoidAsync("downloadFile", fileName, "application/pdf", fileContent);
            }
            else
            {
                errorMessage = "Failed to generate PDF. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error downloading PDF: {ex.Message}";
        }
        finally
        {
            isDownloading = false;
        }
    }

    private async Task DownloadText()
    {
        if (buildResponse == null) return;

        isDownloading = true;
        try
        {
            var response = await Http.PostAsJsonAsync("api/pcbuild/download/text", buildResponse);
            
            if (response.IsSuccessStatusCode)
            {
                var fileContent = await response.Content.ReadAsByteArrayAsync();
                var fileName = $"PC_Build_{buildResponse.BuildName}_{DateTime.UtcNow:yyyyMMdd}.txt";
                
                await JSRuntime.InvokeVoidAsync("downloadFile", fileName, "text/plain", fileContent);
            }
            else
            {
                errorMessage = "Failed to generate text file. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error downloading text file: {ex.Message}";
        }
        finally
        {
            isDownloading = false;
        }
    }

    private void ClearError()
    {
        errorMessage = string.Empty;
    }
}
